"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_helpers_1 = require("@graphql-codegen/plugin-helpers");
const graphql_1 = require("graphql");
const merge_schemas_1 = require("./merge-schemas");
const execute_plugin_1 = require("./execute-plugin");
const errors_1 = require("./errors");
async function codegen(options) {
    let output = '';
    const documents = options.documents || [];
    if (documents.length > 0 && !options.skipDocumentsValidation) {
        validateDocuments(documents);
    }
    const pluginPackages = Object.keys(options.pluginMap).map(key => options.pluginMap[key]);
    // merged schema with parts added by plugins
    let schemaChanged = false;
    let schema = pluginPackages.reduce((schema, plugin) => {
        const addToSchema = typeof plugin.addToSchema === 'function' ? plugin.addToSchema(options.config) : plugin.addToSchema;
        if (!addToSchema) {
            return schema;
        }
        schemaChanged = true;
        return merge_schemas_1.mergeSchemas([schema, addToSchema]);
    }, options.schema);
    if (schemaChanged) {
        // It's for federation, to support extended types without their definitions
        if (options.config.federation) {
            schema = {
                ...schema,
                definitions: schema.definitions.map(def => {
                    if (def.kind !== graphql_1.Kind.OBJECT_TYPE_EXTENSION) {
                        return def;
                    }
                    const isDefined = schema.definitions.some(d => d.kind === graphql_1.Kind.OBJECT_TYPE_DEFINITION && d.name.value === def.name.value);
                    if (isDefined) {
                        return def;
                    }
                    return {
                        ...def,
                        kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,
                    };
                }),
            };
        }
        options.schemaAst = graphql_1.buildASTSchema(schema, options.config.federation
            ? {
                assumeValidSDL: true,
            }
            : undefined);
    }
    const prepend = new Set();
    const append = new Set();
    for (const plugin of options.plugins) {
        const name = Object.keys(plugin)[0];
        const pluginPackage = options.pluginMap[name];
        const pluginConfig = plugin[name];
        const result = await execute_plugin_1.executePlugin({
            name,
            config: typeof pluginConfig !== 'object'
                ? pluginConfig
                : {
                    ...options.config,
                    ...pluginConfig,
                },
            schema,
            schemaAst: options.schemaAst,
            documents: options.documents,
            outputFilename: options.filename,
            allPlugins: options.plugins,
            skipDocumentsValidation: options.skipDocumentsValidation,
        }, pluginPackage);
        if (typeof result === 'string') {
            output += result;
        }
        else if (plugin_helpers_1.isComplexPluginOutput(result)) {
            output += result.content || '';
            if (result.append && result.append.length > 0) {
                for (const item of result.append) {
                    append.add(item);
                }
            }
            if (result.prepend && result.prepend.length > 0) {
                for (const item of result.prepend) {
                    prepend.add(item);
                }
            }
        }
    }
    return [...sortPrependValues(Array.from(prepend.values())), output, ...append.values()].join('\n');
}
exports.codegen = codegen;
function resolveCompareValue(a) {
    if (a.startsWith('/*') || a.startsWith('//') || a.startsWith(' *') || a.startsWith(' */') || a.startsWith('*/')) {
        return 0;
    }
    else if (a.startsWith('import')) {
        return 1;
    }
    else {
        return 2;
    }
}
function sortPrependValues(values) {
    return values.sort((a, b) => {
        const aV = resolveCompareValue(a);
        const bV = resolveCompareValue(b);
        if (aV < bV) {
            return -1;
        }
        if (aV > bV) {
            return 1;
        }
        return 0;
    });
}
exports.sortPrependValues = sortPrependValues;
function validateDocuments(files) {
    // duplicated names
    const operationMap = {};
    files.forEach(file => {
        graphql_1.visit(file.content, {
            OperationDefinition(node) {
                if (typeof node.name !== 'undefined') {
                    if (!operationMap[node.name.value]) {
                        operationMap[node.name.value] = [];
                    }
                    operationMap[node.name.value].push(file.filePath);
                }
            },
        });
    });
    const names = Object.keys(operationMap);
    if (names.length) {
        const duplicated = names.filter(name => operationMap[name].length > 1);
        if (!duplicated.length) {
            return;
        }
        const list = duplicated
            .map(name => `
      * ${name} found in:
        ${operationMap[name]
            .map(filepath => {
            return `
            - ${filepath}
          `.trimRight();
        })
            .join('')}
  `.trimRight())
            .join('');
        throw new errors_1.DetailedError(`Not all operations have an unique name: ${duplicated.join(', ')}`, `
        Not all operations have an unique name
        ${list}
      `);
    }
}
//# sourceMappingURL=codegen.js.map