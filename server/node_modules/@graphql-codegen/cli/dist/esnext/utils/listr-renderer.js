import chalk from 'chalk';
import logUpdate from 'log-update';
import * as indentString from 'indent-string';
import * as logSymbol from 'log-symbols';
import * as UpdateRenderer from 'listr-update-renderer';
import { stripIndent } from 'common-tags';
import { isDetailedError } from '@graphql-codegen/core';
import { debugLog, printLogs } from './debugging';
export class Renderer {
    constructor(tasks, options) {
        this.updateRenderer = new UpdateRenderer(tasks, options);
    }
    render() {
        return this.updateRenderer.render();
    }
    end(err) {
        this.updateRenderer.end(err);
        if (typeof err === undefined) {
            logUpdate.clear();
            return;
        }
        // persist the output
        logUpdate.done();
        // show errors
        if (err) {
            const errorCount = err.errors ? err.errors.length : 0;
            if (errorCount > 0) {
                const count = indentString(chalk.red.bold(`Found ${errorCount} error${errorCount > 1 ? 's' : ''}`), 1);
                const details = err.errors
                    .map(error => {
                    debugLog(`[CLI] Exited with an error`, error);
                    return isDetailedError(error) ? error.details : error;
                })
                    .map((msg, i) => {
                    const source = err.errors[i].source;
                    msg = chalk.gray(indentString(stripIndent(`${msg}`), 4));
                    if (source) {
                        const sourceOfError = typeof source === 'string' ? source : source.name;
                        const title = indentString(`${logSymbol.error} ${sourceOfError}`, 2);
                        return [title, msg].join('\n');
                    }
                    return msg;
                })
                    .join('\n\n');
                logUpdate(['', count, details, ''].join('\n\n'));
            }
            else {
                const details = err.details ? err.details : '';
                logUpdate(`${chalk.red.bold(`${indentString(err.message, 2)}`)}\n${details}\n${chalk.grey(err.stack)}`);
            }
        }
        logUpdate.done();
        printLogs();
    }
}
//# sourceMappingURL=listr-renderer.js.map