"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const path_1 = require("path");
const fs_1 = require("fs");
const YAML = require("json-to-pretty-yaml");
const detectIndent = require("detect-indent");
// Parses config and writes it to a file
function writeConfig(answers, config) {
    const ext = answers.config.toLocaleLowerCase().endsWith('.json') ? 'json' : 'yml';
    const content = ext === 'json' ? JSON.stringify(config) : YAML.stringify(config);
    const fullPath = path_1.resolve(process.cwd(), answers.config);
    const relativePath = path_1.relative(process.cwd(), answers.config);
    fs_1.writeFileSync(fullPath, content, {
        encoding: 'utf-8',
    });
    return {
        relativePath,
        fullPath,
    };
}
exports.writeConfig = writeConfig;
// Updates package.json (script and plugins as dependencies)
function writePackage(answers, configLocation) {
    // script
    const pkgPath = path_1.resolve(process.cwd(), 'package.json');
    const pkgContent = fs_1.readFileSync(pkgPath, {
        encoding: 'utf-8',
    });
    const pkg = JSON.parse(pkgContent);
    const { indent } = detectIndent(pkgContent);
    if (!pkg.scripts) {
        pkg.scripts = {};
    }
    pkg.scripts[answers.script] = `graphql-codegen --config ${configLocation}`;
    // plugin
    if (!pkg.devDependencies) {
        pkg.devDependencies = {};
    }
    // read codegen's version
    let version;
    try {
        // Works in tests
        version = require('../../package.json').version;
    }
    catch (e) {
        // Works in production (because of esm and cjs directories)
        version = require('../../../package.json').version;
    }
    answers.plugins.forEach(plugin => {
        pkg.devDependencies[plugin.package] = version;
    });
    if (answers.introspection) {
        pkg.devDependencies['@graphql-codegen/introspection'] = version;
    }
    fs_1.writeFileSync(pkgPath, JSON.stringify(pkg, null, indent));
}
exports.writePackage = writePackage;
function bold(str) {
    return chalk_1.default.bold(str);
}
exports.bold = bold;
function grey(str) {
    return chalk_1.default.grey(str);
}
exports.grey = grey;
function italic(str) {
    return chalk_1.default.italic(str);
}
exports.italic = italic;
//# sourceMappingURL=helpers.js.map