"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const log_update_1 = require("log-update");
const indentString = require("indent-string");
const logSymbol = require("log-symbols");
const UpdateRenderer = require("listr-update-renderer");
const common_tags_1 = require("common-tags");
const core_1 = require("@graphql-codegen/core");
const debugging_1 = require("./debugging");
class Renderer {
    constructor(tasks, options) {
        this.updateRenderer = new UpdateRenderer(tasks, options);
    }
    render() {
        return this.updateRenderer.render();
    }
    end(err) {
        this.updateRenderer.end(err);
        if (typeof err === undefined) {
            log_update_1.default.clear();
            return;
        }
        // persist the output
        log_update_1.default.done();
        // show errors
        if (err) {
            const errorCount = err.errors ? err.errors.length : 0;
            if (errorCount > 0) {
                const count = indentString(chalk_1.default.red.bold(`Found ${errorCount} error${errorCount > 1 ? 's' : ''}`), 1);
                const details = err.errors
                    .map(error => {
                    debugging_1.debugLog(`[CLI] Exited with an error`, error);
                    return core_1.isDetailedError(error) ? error.details : error;
                })
                    .map((msg, i) => {
                    const source = err.errors[i].source;
                    msg = chalk_1.default.gray(indentString(common_tags_1.stripIndent(`${msg}`), 4));
                    if (source) {
                        const sourceOfError = typeof source === 'string' ? source : source.name;
                        const title = indentString(`${logSymbol.error} ${sourceOfError}`, 2);
                        return [title, msg].join('\n');
                    }
                    return msg;
                })
                    .join('\n\n');
                log_update_1.default(['', count, details, ''].join('\n\n'));
            }
            else {
                const details = err.details ? err.details : '';
                log_update_1.default(`${chalk_1.default.red.bold(`${indentString(err.message, 2)}`)}\n${details}\n${chalk_1.default.grey(err.stack)}`);
            }
        }
        log_update_1.default.done();
        debugging_1.printLogs();
    }
}
exports.Renderer = Renderer;
//# sourceMappingURL=listr-renderer.js.map