"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_plugin_common_1 = require("@graphql-codegen/visitor-plugin-common");
const graphql_1 = require("graphql");
class TypeScriptOperationVariablesToObject extends visitor_plugin_common_1.OperationVariablesToObject {
    constructor(_scalars, _convertName, _avoidOptionals, _immutableTypes, _namespacedImportName = null, _enumNames = [], _enumPrefix = true) {
        super(_scalars, _convertName, _namespacedImportName, _enumNames, _enumPrefix);
        this._avoidOptionals = _avoidOptionals;
        this._immutableTypes = _immutableTypes;
    }
    clearOptional(str) {
        const prefix = this._namespacedImportName ? `${this._namespacedImportName}\.` : '';
        const rgx = new RegExp(`^${prefix}Maybe<(.*?)>$`, 'i');
        if (str.startsWith(`${this._namespacedImportName ? `${this._namespacedImportName}.` : ''}Maybe`)) {
            return str.replace(rgx, '$1');
        }
        return str;
    }
    wrapAstTypeWithModifiers(baseType, typeNode) {
        const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : '';
        if (typeNode.kind === graphql_1.Kind.NON_NULL_TYPE) {
            const type = this.wrapAstTypeWithModifiers(baseType, typeNode.type);
            return this.clearOptional(type);
        }
        else if (typeNode.kind === graphql_1.Kind.LIST_TYPE) {
            const innerType = this.wrapAstTypeWithModifiers(baseType, typeNode.type);
            return `${prefix}Maybe<${this._immutableTypes ? 'ReadonlyArray' : 'Array'}<${innerType}>>`;
        }
        else {
            return `${prefix}Maybe<${baseType}>`;
        }
    }
    formatFieldString(fieldName, isNonNullType, hasDefaultValue) {
        if (!hasDefaultValue && (this._avoidOptionals || isNonNullType)) {
            return fieldName;
        }
        return `${fieldName}?`;
    }
    formatTypeString(fieldType, isNonNullType, hasDefaultValue) {
        if (!hasDefaultValue && isNonNullType) {
            return this.clearOptional(fieldType);
        }
        return fieldType;
    }
}
exports.TypeScriptOperationVariablesToObject = TypeScriptOperationVariablesToObject;
//# sourceMappingURL=typescript-variables-to-object.js.map