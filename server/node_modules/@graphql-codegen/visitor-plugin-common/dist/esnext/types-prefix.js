const DEFAULT_TYPES_PREFIX = {
    type: '',
    input: '',
    interface: '',
    enum: '',
    scalar: '',
    union: '',
};
const VALID_KEYS = Object.keys(DEFAULT_TYPES_PREFIX);
export function parseTypesPrefixConfig(c) {
    if (!c || c === '') {
        return DEFAULT_TYPES_PREFIX;
    }
    else if (typeof c === 'string') {
        return {
            type: c,
            input: c,
            interface: c,
            enum: c,
            scalar: c,
            union: c,
        };
    }
    else if (typeof c === 'object') {
        const invalidKeys = Object.keys(c).filter(key => !VALID_KEYS.includes(key));
        if (invalidKeys.length > 0) {
            console.warn(`Invalid keys specified for "typesPrefix": ${invalidKeys.join(', ')}. Valid keys are: ${VALID_KEYS.join(', ')}`);
        }
        return {
            ...DEFAULT_TYPES_PREFIX,
            ...c,
        };
    }
    else {
        throw new Error(`Invalid "typesPrefix" configuration! Please specify an object or a string.`);
    }
}
//# sourceMappingURL=types-prefix.js.map