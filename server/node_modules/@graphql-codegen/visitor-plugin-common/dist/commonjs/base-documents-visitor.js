"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoBind = require("auto-bind");
const scalars_1 = require("./scalars");
const utils_1 = require("./utils");
const variables_to_object_1 = require("./variables-to-object");
const base_visitor_1 = require("./base-visitor");
function getRootType(operation, schema) {
    switch (operation) {
        case 'query':
            return schema.getQueryType();
        case 'mutation':
            return schema.getMutationType();
        case 'subscription':
            return schema.getSubscriptionType();
    }
}
class BaseDocumentsVisitor extends base_visitor_1.BaseVisitor {
    constructor(rawConfig, additionalConfig, _schema, defaultScalars = scalars_1.DEFAULT_SCALARS) {
        super(rawConfig, {
            enumPrefix: utils_1.getConfigValue(rawConfig.enumPrefix, true),
            preResolveTypes: utils_1.getConfigValue(rawConfig.preResolveTypes, false),
            dedupeOperationSuffix: utils_1.getConfigValue(rawConfig.dedupeOperationSuffix, false),
            addTypename: !rawConfig.skipTypename,
            globalNamespace: !!rawConfig.globalNamespace,
            operationResultSuffix: utils_1.getConfigValue(rawConfig.operationResultSuffix, ''),
            scalars: utils_1.buildScalars(_schema, rawConfig.scalars, defaultScalars),
            ...(additionalConfig || {}),
        });
        this._schema = _schema;
        this._unnamedCounter = 1;
        autoBind(this);
        this._variablesTransfomer = new variables_to_object_1.OperationVariablesToObject(this.scalars, this.convertName, this.config.namespacedImportName);
    }
    setSelectionSetHandler(handler) {
        this._selectionSetToObject = handler;
    }
    setDeclarationBlockConfig(config) {
        this._declarationBlockConfig = config;
    }
    setVariablesTransformer(variablesTransfomer) {
        this._variablesTransfomer = variablesTransfomer;
    }
    convertName(node, options) {
        const useTypesPrefix = options && typeof options.useTypesPrefix === 'boolean' ? options.useTypesPrefix : true;
        return (useTypesPrefix ? this._parsedConfig.typesPrefix : '') + this._parsedConfig.convert(node, options);
    }
    get schema() {
        return this._schema;
    }
    get addTypename() {
        return this._parsedConfig.addTypename;
    }
    handleAnonymouseOperation(node) {
        const name = node.name && node.name.value;
        if (name) {
            return this.convertName(node, {
                useTypesPrefix: false,
            });
        }
        return this.convertName(this._unnamedCounter++ + '', {
            prefix: 'Unnamed_',
            suffix: '_',
            useTypesPrefix: false,
        });
    }
    FragmentDefinition(node) {
        const fragmentRootType = this._schema.getType(node.typeCondition.name.value);
        const selectionSet = this._selectionSetToObject.createNext(fragmentRootType, node.selectionSet);
        const fragmentSuffix = this.config.dedupeOperationSuffix && node.name.value.toLowerCase().endsWith('fragment') ? '' : 'Fragment';
        return new utils_1.DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind('type')
            .withName(this.convertName(node, {
            useTypesPrefix: true,
            suffix: fragmentSuffix,
        }))
            .withContent(selectionSet.string).string;
    }
    OperationDefinition(node) {
        const name = this.handleAnonymouseOperation(node);
        const operationRootType = getRootType(node.operation, this._schema);
        if (!operationRootType) {
            throw new Error(`Unable to find root schema type for operation type "${node.operation}"!`);
        }
        const selectionSet = this._selectionSetToObject.createNext(operationRootType, node.selectionSet);
        const visitedOperationVariables = this._variablesTransfomer.transform(node.variableDefinitions);
        const operationTypeSuffix = this.config.dedupeOperationSuffix && name.toLowerCase().endsWith(node.operation) ? '' : utils_1.toPascalCase(node.operation);
        const operationResult = new utils_1.DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind('type')
            .withName(this.convertName(name, {
            suffix: operationTypeSuffix + this._parsedConfig.operationResultSuffix,
        }))
            .withContent(selectionSet.string).string;
        const operationVariables = new utils_1.DeclarationBlock(this._declarationBlockConfig)
            .export()
            .asKind('type')
            .withName(this.convertName(name, {
            suffix: operationTypeSuffix + 'Variables',
        }))
            .withBlock(visitedOperationVariables).string;
        return [operationVariables, operationResult].filter(r => r).join('\n\n');
    }
}
exports.BaseDocumentsVisitor = BaseDocumentsVisitor;
//# sourceMappingURL=base-documents-visitor.js.map