"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const autoBind = require("auto-bind");
const graphql_1 = require("graphql");
const dependency_graph_1 = require("dependency-graph");
const graphql_tag_1 = require("graphql-tag");
const plugin_helpers_1 = require("@graphql-codegen/plugin-helpers");
const utils_1 = require("./utils");
const path_1 = require("path");
const scalars_1 = require("./scalars");
var DocumentMode;
(function (DocumentMode) {
    DocumentMode["graphQLTag"] = "graphQLTag";
    DocumentMode["documentNode"] = "documentNode";
    DocumentMode["external"] = "external";
})(DocumentMode = exports.DocumentMode || (exports.DocumentMode = {}));
class ClientSideBaseVisitor extends index_1.BaseVisitor {
    constructor(_fragments, rawConfig, additionalConfig, documents) {
        super(rawConfig, {
            scalars: utils_1.buildScalars(undefined, rawConfig.scalars, scalars_1.DEFAULT_SCALARS),
            dedupeOperationSuffix: utils_1.getConfigValue(rawConfig.dedupeOperationSuffix, false),
            gqlImport: rawConfig.gqlImport || null,
            noExport: !!rawConfig.noExport,
            operationResultSuffix: utils_1.getConfigValue(rawConfig.operationResultSuffix, ''),
            documentVariablePrefix: utils_1.getConfigValue(rawConfig.documentVariablePrefix, ''),
            documentVariableSuffix: utils_1.getConfigValue(rawConfig.documentVariableSuffix, 'Document'),
            fragmentVariablePrefix: utils_1.getConfigValue(rawConfig.documentVariablePrefix, ''),
            fragmentVariableSuffix: utils_1.getConfigValue(rawConfig.documentVariableSuffix, 'FragmentDoc'),
            transformUnderscore: utils_1.getConfigValue(rawConfig.transformUnderscore, false),
            documentMode: ((rawConfig) => {
                if (typeof rawConfig.noGraphQLTag === 'boolean') {
                    return rawConfig.noGraphQLTag ? DocumentMode.documentNode : DocumentMode.graphQLTag;
                }
                return utils_1.getConfigValue(rawConfig.documentMode, DocumentMode.graphQLTag);
            })(rawConfig),
            importDocumentNodeExternallyFrom: utils_1.getConfigValue(rawConfig.importDocumentNodeExternallyFrom, ''),
            ...additionalConfig,
        });
        this._fragments = _fragments;
        this._collectedOperations = [];
        this._documents = [];
        this._documents = documents;
        autoBind(this);
    }
    _getFragmentName(fragment) {
        return this.convertName(fragment, {
            suffix: this.config.fragmentVariableSuffix,
            prefix: this.config.fragmentVariablePrefix,
            transformUnderscore: this.config.transformUnderscore,
            useTypesPrefix: false,
        });
    }
    _extractFragments(document) {
        if (!document) {
            return [];
        }
        const names = [];
        graphql_1.visit(document, {
            enter: {
                FragmentSpread: (node) => {
                    names.push(node.name.value);
                },
            },
        });
        return names;
    }
    _transformFragments(document) {
        return this._extractFragments(document).map(document => this._getFragmentName(document));
    }
    _includeFragments(fragments) {
        if (fragments && fragments.length > 0) {
            if (this.config.documentMode === DocumentMode.documentNode) {
                return `${fragments
                    .filter((name, i, all) => all.indexOf(name) === i)
                    .map(name => {
                    const found = this._fragments.find(f => `${f.name}FragmentDoc` === name);
                    if (found) {
                        return graphql_1.print(found.node);
                    }
                    return null;
                })
                    .filter(a => a)
                    .join('\n')}`;
            }
            else {
                return `${fragments
                    .filter((name, i, all) => all.indexOf(name) === i)
                    .map(name => '${' + name + '}')
                    .join('\n')}`;
            }
        }
        return '';
    }
    _prepareDocument(documentStr) {
        return documentStr;
    }
    _gql(node) {
        const doc = this._prepareDocument(`
    ${graphql_1.print(node)}
    ${this._includeFragments(this._transformFragments(node))}`);
        if (this.config.documentMode === DocumentMode.documentNode) {
            const gqlObj = graphql_tag_1.default(doc);
            if (gqlObj && gqlObj['loc']) {
                delete gqlObj.loc;
            }
            return JSON.stringify(gqlObj);
        }
        return 'gql`' + doc + '`';
    }
    _generateFragment(fragmentDocument) {
        const name = this._getFragmentName(fragmentDocument);
        return `export const ${name}${this.config.documentMode === DocumentMode.documentNode ? ': DocumentNode' : ''} = ${this._gql(fragmentDocument)};`;
    }
    get fragmentsGraph() {
        const graph = new dependency_graph_1.DepGraph({ circular: true });
        for (const fragment of this._fragments) {
            if (graph.hasNode(fragment.name)) {
                const cachedAsString = graphql_1.print(graph.getNodeData(fragment.name).node);
                const asString = graphql_1.print(fragment.node);
                if (cachedAsString !== asString) {
                    throw new Error(`Duplicated fragment called '${fragment.name}'!`);
                }
            }
            graph.addNode(fragment.name, fragment);
        }
        this._fragments.forEach(fragment => {
            const depends = this._extractFragments(fragment.node);
            if (depends && depends.length > 0) {
                depends.forEach(name => {
                    graph.addDependency(fragment.name, name);
                });
            }
        });
        return graph;
    }
    get fragments() {
        if (this._fragments.length === 0 || this.config.documentMode === DocumentMode.external) {
            return '';
        }
        const graph = this.fragmentsGraph;
        const orderedDeps = graph.overallOrder();
        const localFragments = orderedDeps.filter(name => !graph.getNodeData(name).isExternal).map(name => this._generateFragment(graph.getNodeData(name).node));
        return localFragments.join('\n');
    }
    _parseImport(importStr) {
        const [moduleName, propName] = importStr.split('#');
        return {
            moduleName,
            propName,
        };
    }
    getImports() {
        let imports = [];
        switch (this.config.documentMode) {
            case DocumentMode.documentNode:
                imports.push(`import { DocumentNode } from 'graphql';`);
                break;
            case DocumentMode.graphQLTag:
                const gqlImport = this._parseImport(this.config.gqlImport || 'graphql-tag');
                imports.push(`import ${gqlImport.propName ? `{ ${gqlImport.propName === 'gql' ? 'gql' : `${gqlImport.propName} as gql`} }` : 'gql'} from '${gqlImport.moduleName}';`);
                break;
            case DocumentMode.external:
                if (this._collectedOperations.length > 0) {
                    if (this.config.importDocumentNodeExternallyFrom === 'near-operation-file' && this._documents.length === 1) {
                        imports.push(`import * as Operations from './${path_1.basename(this._documents[0].filePath)}';`);
                    }
                    else {
                        imports.push(`import * as Operations from '${this.config.importDocumentNodeExternallyFrom}';`);
                    }
                }
                break;
            default:
                break;
        }
        if (this.config.documentMode === DocumentMode.graphQLTag) {
            (this._fragments || [])
                .filter(f => f.isExternal && f.importFrom && (!f['level'] || (f['level'] !== undefined && f['level'] === 0)))
                .forEach(externalFragment => {
                const identifierName = this._getFragmentName(externalFragment.name);
                imports.push(`import { ${identifierName} } from '${externalFragment.importFrom}';`);
            });
        }
        return imports;
    }
    buildOperation(node, documentVariableName, operationType, operationResultType, operationVariablesTypes) {
        return null;
    }
    OperationDefinition(node) {
        if (!node.name || !node.name.value) {
            return null;
        }
        this._collectedOperations.push(node);
        const documentVariableName = this.convertName(node, {
            suffix: this.config.documentVariableSuffix,
            prefix: this.config.documentVariablePrefix,
            transformUnderscore: this.config.transformUnderscore,
            useTypesPrefix: false,
        });
        let documentString = '';
        if (this.config.documentMode !== DocumentMode.external) {
            documentString = `${this.config.noExport ? '' : 'export'} const ${documentVariableName}${this.config.documentMode === DocumentMode.documentNode ? ': DocumentNode' : ''} = ${this._gql(node)};`;
        }
        const operationType = plugin_helpers_1.toPascalCase(node.operation);
        const operationTypeSuffix = this.config.dedupeOperationSuffix && node.name.value.toLowerCase().endsWith(node.operation) ? '' : operationType;
        const operationResultType = this.convertName(node, {
            suffix: operationTypeSuffix + this._parsedConfig.operationResultSuffix,
            transformUnderscore: this.config.transformUnderscore,
        });
        const operationVariablesTypes = this.convertName(node, {
            suffix: operationTypeSuffix + 'Variables',
            transformUnderscore: this.config.transformUnderscore,
        });
        const additional = this.buildOperation(node, documentVariableName, operationType, operationResultType, operationVariablesTypes);
        return [documentString, additional].filter(a => a).join('\n');
    }
}
exports.ClientSideBaseVisitor = ClientSideBaseVisitor;
//# sourceMappingURL=client-side-base-visitor.js.map